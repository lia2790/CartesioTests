XBotCore:
   config_path: "/home/liana/catkin_ws/src/CartesioTests/CartesioTestsCpp/configs/xbot/coman_config/coman.yaml"

XBotInterface:
  urdf_path: "/home/liana/catkin_ws/src/CartesioTests/CartesioTestsCpp/robots/coman/urdf/coman.urdf"
  srdf_path: "/home/liana/catkin_ws/src/CartesioTests/CartesioTestsCpp/robots/coman/srdf/coman.srdf"
  joint_map_path: "/home/liana/catkin_ws/src/CartesioTests/CartesioTestsCpp/configs/xbot/coman_config/coman_joint_map.yaml"

RobotInterface:
   framework_name: "ROS"

ModelInterface:
  model_type: "RBDL"
  is_model_floating_base: "true"
  
MasterCommunicationInterface:
   framework_name: "ROS"

# hal
xbotcore_devices:
        
    joint_master:
        master: true  # this is a master device for 'joint'
        thread: rt_main

# define threads to be created
xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.001, core_id: 2}
    nrt_main: {sched: other, prio: 0 , period: 0.005}

xbotcore_plugins:

    # this plugin is shipped with xbot2, and it generates the
    # ROS api for the framework
    # it is not designed to be real-time safe, so it must executed
    # inside a thread with `other` priority
    ros_io: {thread: nrt_main, type: ros_io}
    # ros_control: {thread: nrt_main, type: ros_control}
    # cartesio: {thread: rt_main, type: cartesio_rt}
    tpo_control:
        thread: nrt_main
        type: xbot_control_main_plugin
        params:
            js_topic: {value: "joint_states", type: string} #topic where robot state pub will read from for rviz
            aw_topic: {value: "wrench_commands", type: string} #topic where this plugin will read the command for wrenches


# additional parameters that don't relate to any plugin 
xbotcore_param:
    /joint_master/tx_filter_autostart: {value: true, type: bool}
    /joint_master/tx_filter_cutoff: {value: 2.0, type: double}
    /xbot_internal/ros_io/call_timeout: {value: 1.0, type: chrono}
    /rt_slow/memory_hooks: {value: true, type: bool}
